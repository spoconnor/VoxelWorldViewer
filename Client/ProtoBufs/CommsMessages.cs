// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CommsMessages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CommsMessages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Message, global::CommsMessages.Message.Builder> internal__static_CommsMessages_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Ping__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Ping, global::CommsMessages.Ping.Builder> internal__static_CommsMessages_Ping__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Pong__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Pong, global::CommsMessages.Pong.Builder> internal__static_CommsMessages_Pong__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Response, global::CommsMessages.Response.Builder> internal__static_CommsMessages_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_NewUser__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.NewUser, global::CommsMessages.NewUser.Builder> internal__static_CommsMessages_NewUser__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Login__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Login, global::CommsMessages.Login.Builder> internal__static_CommsMessages_Login__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Say__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Say, global::CommsMessages.Say.Builder> internal__static_CommsMessages_Say__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_MapRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapRequest, global::CommsMessages.MapRequest.Builder> internal__static_CommsMessages_MapRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_MapIgnore__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapIgnore, global::CommsMessages.MapIgnore.Builder> internal__static_CommsMessages_MapIgnore__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Map__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Map, global::CommsMessages.Map.Builder> internal__static_CommsMessages_Map__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_MapUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapUpdate, global::CommsMessages.MapUpdate.Builder> internal__static_CommsMessages_MapUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_MapCharacterUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapCharacterUpdate, global::CommsMessages.MapCharacterUpdate.Builder> internal__static_CommsMessages_MapCharacterUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_QueryServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.QueryServer, global::CommsMessages.QueryServer.Builder> internal__static_CommsMessages_QueryServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_QueryServerResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.QueryServerResponse, global::CommsMessages.QueryServerResponse.Builder> internal__static_CommsMessages_QueryServerResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static CommsMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNDb21tc01lc3NhZ2VzLnByb3RvEg1Db21tc01lc3NhZ2VzIvEECgdNZXNz" + 
          "YWdlEg8KB21zZ3R5cGUYASACKAUSDAoEZnJvbRgCIAIoBRIMCgRkZXN0GAMg" + 
          "AigFEikKCHJlc3BvbnNlGAQgASgLMhcuQ29tbXNNZXNzYWdlcy5SZXNwb25z" + 
          "ZRIhCgRwaW5nGAUgASgLMhMuQ29tbXNNZXNzYWdlcy5QaW5nEiEKBHBvbmcY" + 
          "BiABKAsyEy5Db21tc01lc3NhZ2VzLlBvbmcSJwoHbmV3VXNlchgHIAEoCzIW" + 
          "LkNvbW1zTWVzc2FnZXMuTmV3VXNlchIjCgVsb2dpbhgIIAEoCzIULkNvbW1z" + 
          "TWVzc2FnZXMuTG9naW4SHwoDc2F5GAkgASgLMhIuQ29tbXNNZXNzYWdlcy5T" + 
          "YXkSLQoKbWFwUmVxdWVzdBgKIAEoCzIZLkNvbW1zTWVzc2FnZXMuTWFwUmVx" + 
          "dWVzdBIrCgltYXBJZ25vcmUYCyABKAsyGC5Db21tc01lc3NhZ2VzLk1hcEln" + 
          "bm9yZRIfCgNtYXAYDCABKAsyEi5Db21tc01lc3NhZ2VzLk1hcBIrCgltYXBV" + 
          "cGRhdGUYDSABKAsyGC5Db21tc01lc3NhZ2VzLk1hcFVwZGF0ZRI9ChJtYXBD" + 
          "aGFyYWN0ZXJVcGRhdGUYDiABKAsyIS5Db21tc01lc3NhZ2VzLk1hcENoYXJh" + 
          "Y3RlclVwZGF0ZRIvCgtxdWVyeVNlcnZlchgPIAEoCzIaLkNvbW1zTWVzc2Fn" + 
          "ZXMuUXVlcnlTZXJ2ZXISPwoTcXVlcnlTZXJ2ZXJSZXNwb25zZRgQIAEoCzIi" + 
          "LkNvbW1zTWVzc2FnZXMuUXVlcnlTZXJ2ZXJSZXNwb25zZSIVCgRQaW5nEg0K" + 
          "BWNvdW50GAEgAigFIhUKBFBvbmcSDQoFY291bnQYASACKAUiKQoIUmVzcG9u" + 
          "c2USDAoEY29kZRgBIAIoBRIPCgdtZXNzYWdlGAIgASgJIjsKB05ld1VzZXIS" + 
          "EAoIdXNlcm5hbWUYASACKAkSEAoIcGFzc3dvcmQYAiACKAkSDAoEbmFtZRgD" + 
          "IAIoCSJMCgVMb2dpbhIRCglpcGFkZHJlc3MYASACKAkSDAoEcG9ydBgCIAIo" + 
          "BRIQCgh1c2VybmFtZRgDIAIoCRIQCghwYXNzd29yZBgEIAIoCSITCgNTYXkS" + 
          "DAoEdGV4dBgBIAIoCSIiCgpNYXBSZXF1ZXN0EgkKAXgYASACKAUSCQoBeRgC" + 
          "IAIoBSIhCglNYXBJZ25vcmUSCQoBeBgBIAIoBRIJCgF5GAIgAigFIk8KA01h" + 
          "cBIMCgRtaW5YGAEgAigFEgwKBG1pblkYAiACKAUSDAoEbWF4WBgDIAIoBRIM" + 
          "CgRtYXhZGAQgAigFEhAKCGRhdGFTaXplGAUgAigFIj4KCU1hcFVwZGF0ZRIJ" + 
          "CgF4GAEgAigFEgkKAXkYAiACKAUSCQoBehgDIAIoBRIQCghuZXdCbG9jaxgE" + 
          "IAIoBSJBChJNYXBDaGFyYWN0ZXJVcGRhdGUSCgoCaWQYASACKAUSCQoBeBgC" + 
          "IAIoBRIJCgF5GAMgAigFEgkKAXoYBCACKAUiDQoLUXVlcnlTZXJ2ZXIibQoT" + 
          "UXVlcnlTZXJ2ZXJSZXNwb25zZRIUCgxtaW5NYXBDaHVua1gYASACKAUSFAoM" + 
          "bWluTWFwQ2h1bmtZGAIgAigFEhQKDG1heE1hcENodW5rWBgDIAIoBRIUCgxt" + 
          "YXhNYXBDaHVua1kYBCACKAUq0gEKB01zZ1R5cGUSDQoJZVJlc3BvbnNlEAES" + 
          "CQoFZVBpbmcQAhIJCgVlUG9uZxADEgwKCGVOZXdVc2VyEAQSCgoGZUxvZ2lu" + 
          "EAUSCAoEZVNheRAGEg8KC2VNYXBSZXF1ZXN0EAcSDgoKZU1hcElnbm9yZRAI" + 
          "EggKBGVNYXAQCRIOCgplTWFwVXBkYXRlEAoSFwoTZU1hcENoYXJhY3RlclVw" + 
          "ZGF0ZRALEhAKDGVRdWVyeVNlcnZlchAMEhgKFGVRdWVyeVNlcnZlclJlc3Bv" + 
          "bnNlEA1CAkgB");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_CommsMessages_Message__Descriptor = Descriptor.MessageTypes[0];
        internal__static_CommsMessages_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Message, global::CommsMessages.Message.Builder>(internal__static_CommsMessages_Message__Descriptor,
                new string[] { "Msgtype", "From", "Dest", "Response", "Ping", "Pong", "NewUser", "Login", "Say", "MapRequest", "MapIgnore", "Map", "MapUpdate", "MapCharacterUpdate", "QueryServer", "QueryServerResponse", });
        internal__static_CommsMessages_Ping__Descriptor = Descriptor.MessageTypes[1];
        internal__static_CommsMessages_Ping__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Ping, global::CommsMessages.Ping.Builder>(internal__static_CommsMessages_Ping__Descriptor,
                new string[] { "Count", });
        internal__static_CommsMessages_Pong__Descriptor = Descriptor.MessageTypes[2];
        internal__static_CommsMessages_Pong__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Pong, global::CommsMessages.Pong.Builder>(internal__static_CommsMessages_Pong__Descriptor,
                new string[] { "Count", });
        internal__static_CommsMessages_Response__Descriptor = Descriptor.MessageTypes[3];
        internal__static_CommsMessages_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Response, global::CommsMessages.Response.Builder>(internal__static_CommsMessages_Response__Descriptor,
                new string[] { "Code", "Message", });
        internal__static_CommsMessages_NewUser__Descriptor = Descriptor.MessageTypes[4];
        internal__static_CommsMessages_NewUser__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.NewUser, global::CommsMessages.NewUser.Builder>(internal__static_CommsMessages_NewUser__Descriptor,
                new string[] { "Username", "Password", "Name", });
        internal__static_CommsMessages_Login__Descriptor = Descriptor.MessageTypes[5];
        internal__static_CommsMessages_Login__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Login, global::CommsMessages.Login.Builder>(internal__static_CommsMessages_Login__Descriptor,
                new string[] { "Ipaddress", "Port", "Username", "Password", });
        internal__static_CommsMessages_Say__Descriptor = Descriptor.MessageTypes[6];
        internal__static_CommsMessages_Say__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Say, global::CommsMessages.Say.Builder>(internal__static_CommsMessages_Say__Descriptor,
                new string[] { "Text", });
        internal__static_CommsMessages_MapRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_CommsMessages_MapRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapRequest, global::CommsMessages.MapRequest.Builder>(internal__static_CommsMessages_MapRequest__Descriptor,
                new string[] { "X", "Y", });
        internal__static_CommsMessages_MapIgnore__Descriptor = Descriptor.MessageTypes[8];
        internal__static_CommsMessages_MapIgnore__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapIgnore, global::CommsMessages.MapIgnore.Builder>(internal__static_CommsMessages_MapIgnore__Descriptor,
                new string[] { "X", "Y", });
        internal__static_CommsMessages_Map__Descriptor = Descriptor.MessageTypes[9];
        internal__static_CommsMessages_Map__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Map, global::CommsMessages.Map.Builder>(internal__static_CommsMessages_Map__Descriptor,
                new string[] { "MinX", "MinY", "MaxX", "MaxY", "DataSize", });
        internal__static_CommsMessages_MapUpdate__Descriptor = Descriptor.MessageTypes[10];
        internal__static_CommsMessages_MapUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapUpdate, global::CommsMessages.MapUpdate.Builder>(internal__static_CommsMessages_MapUpdate__Descriptor,
                new string[] { "X", "Y", "Z", "NewBlock", });
        internal__static_CommsMessages_MapCharacterUpdate__Descriptor = Descriptor.MessageTypes[11];
        internal__static_CommsMessages_MapCharacterUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapCharacterUpdate, global::CommsMessages.MapCharacterUpdate.Builder>(internal__static_CommsMessages_MapCharacterUpdate__Descriptor,
                new string[] { "Id", "X", "Y", "Z", });
        internal__static_CommsMessages_QueryServer__Descriptor = Descriptor.MessageTypes[12];
        internal__static_CommsMessages_QueryServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.QueryServer, global::CommsMessages.QueryServer.Builder>(internal__static_CommsMessages_QueryServer__Descriptor,
                new string[] { });
        internal__static_CommsMessages_QueryServerResponse__Descriptor = Descriptor.MessageTypes[13];
        internal__static_CommsMessages_QueryServerResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.QueryServerResponse, global::CommsMessages.QueryServerResponse.Builder>(internal__static_CommsMessages_QueryServerResponse__Descriptor,
                new string[] { "MinMapChunkX", "MinMapChunkY", "MaxMapChunkX", "MaxMapChunkY", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum MsgType {
    eResponse = 1,
    ePing = 2,
    ePong = 3,
    eNewUser = 4,
    eLogin = 5,
    eSay = 6,
    eMapRequest = 7,
    eMapIgnore = 8,
    eMap = 9,
    eMapUpdate = 10,
    eMapCharacterUpdate = 11,
    eQueryServer = 12,
    eQueryServerResponse = 13,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::GeneratedMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "dest", "from", "login", "map", "mapCharacterUpdate", "mapIgnore", "mapRequest", "mapUpdate", "msgtype", "newUser", "ping", "pong", "queryServer", "queryServerResponse", "response", "say" };
    private static readonly uint[] _messageFieldTags = new uint[] { 24, 16, 66, 98, 114, 90, 82, 106, 8, 58, 42, 50, 122, 130, 34, 74 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Message__FieldAccessorTable; }
    }
    
    public const int MsgtypeFieldNumber = 1;
    private bool hasMsgtype;
    private int msgtype_;
    public bool HasMsgtype {
      get { return hasMsgtype; }
    }
    public int Msgtype {
      get { return msgtype_; }
    }
    
    public const int FromFieldNumber = 2;
    private bool hasFrom;
    private int from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public int From {
      get { return from_; }
    }
    
    public const int DestFieldNumber = 3;
    private bool hasDest;
    private int dest_;
    public bool HasDest {
      get { return hasDest; }
    }
    public int Dest {
      get { return dest_; }
    }
    
    public const int ResponseFieldNumber = 4;
    private bool hasResponse;
    private global::CommsMessages.Response response_;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::CommsMessages.Response Response {
      get { return response_ ?? global::CommsMessages.Response.DefaultInstance; }
    }
    
    public const int PingFieldNumber = 5;
    private bool hasPing;
    private global::CommsMessages.Ping ping_;
    public bool HasPing {
      get { return hasPing; }
    }
    public global::CommsMessages.Ping Ping {
      get { return ping_ ?? global::CommsMessages.Ping.DefaultInstance; }
    }
    
    public const int PongFieldNumber = 6;
    private bool hasPong;
    private global::CommsMessages.Pong pong_;
    public bool HasPong {
      get { return hasPong; }
    }
    public global::CommsMessages.Pong Pong {
      get { return pong_ ?? global::CommsMessages.Pong.DefaultInstance; }
    }
    
    public const int NewUserFieldNumber = 7;
    private bool hasNewUser;
    private global::CommsMessages.NewUser newUser_;
    public bool HasNewUser {
      get { return hasNewUser; }
    }
    public global::CommsMessages.NewUser NewUser {
      get { return newUser_ ?? global::CommsMessages.NewUser.DefaultInstance; }
    }
    
    public const int LoginFieldNumber = 8;
    private bool hasLogin;
    private global::CommsMessages.Login login_;
    public bool HasLogin {
      get { return hasLogin; }
    }
    public global::CommsMessages.Login Login {
      get { return login_ ?? global::CommsMessages.Login.DefaultInstance; }
    }
    
    public const int SayFieldNumber = 9;
    private bool hasSay;
    private global::CommsMessages.Say say_;
    public bool HasSay {
      get { return hasSay; }
    }
    public global::CommsMessages.Say Say {
      get { return say_ ?? global::CommsMessages.Say.DefaultInstance; }
    }
    
    public const int MapRequestFieldNumber = 10;
    private bool hasMapRequest;
    private global::CommsMessages.MapRequest mapRequest_;
    public bool HasMapRequest {
      get { return hasMapRequest; }
    }
    public global::CommsMessages.MapRequest MapRequest {
      get { return mapRequest_ ?? global::CommsMessages.MapRequest.DefaultInstance; }
    }
    
    public const int MapIgnoreFieldNumber = 11;
    private bool hasMapIgnore;
    private global::CommsMessages.MapIgnore mapIgnore_;
    public bool HasMapIgnore {
      get { return hasMapIgnore; }
    }
    public global::CommsMessages.MapIgnore MapIgnore {
      get { return mapIgnore_ ?? global::CommsMessages.MapIgnore.DefaultInstance; }
    }
    
    public const int MapFieldNumber = 12;
    private bool hasMap;
    private global::CommsMessages.Map map_;
    public bool HasMap {
      get { return hasMap; }
    }
    public global::CommsMessages.Map Map {
      get { return map_ ?? global::CommsMessages.Map.DefaultInstance; }
    }
    
    public const int MapUpdateFieldNumber = 13;
    private bool hasMapUpdate;
    private global::CommsMessages.MapUpdate mapUpdate_;
    public bool HasMapUpdate {
      get { return hasMapUpdate; }
    }
    public global::CommsMessages.MapUpdate MapUpdate {
      get { return mapUpdate_ ?? global::CommsMessages.MapUpdate.DefaultInstance; }
    }
    
    public const int MapCharacterUpdateFieldNumber = 14;
    private bool hasMapCharacterUpdate;
    private global::CommsMessages.MapCharacterUpdate mapCharacterUpdate_;
    public bool HasMapCharacterUpdate {
      get { return hasMapCharacterUpdate; }
    }
    public global::CommsMessages.MapCharacterUpdate MapCharacterUpdate {
      get { return mapCharacterUpdate_ ?? global::CommsMessages.MapCharacterUpdate.DefaultInstance; }
    }
    
    public const int QueryServerFieldNumber = 15;
    private bool hasQueryServer;
    private global::CommsMessages.QueryServer queryServer_;
    public bool HasQueryServer {
      get { return hasQueryServer; }
    }
    public global::CommsMessages.QueryServer QueryServer {
      get { return queryServer_ ?? global::CommsMessages.QueryServer.DefaultInstance; }
    }
    
    public const int QueryServerResponseFieldNumber = 16;
    private bool hasQueryServerResponse;
    private global::CommsMessages.QueryServerResponse queryServerResponse_;
    public bool HasQueryServerResponse {
      get { return hasQueryServerResponse; }
    }
    public global::CommsMessages.QueryServerResponse QueryServerResponse {
      get { return queryServerResponse_ ?? global::CommsMessages.QueryServerResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsgtype) return false;
        if (!hasFrom) return false;
        if (!hasDest) return false;
        if (HasResponse) {
          if (!Response.IsInitialized) return false;
        }
        if (HasPing) {
          if (!Ping.IsInitialized) return false;
        }
        if (HasPong) {
          if (!Pong.IsInitialized) return false;
        }
        if (HasNewUser) {
          if (!NewUser.IsInitialized) return false;
        }
        if (HasLogin) {
          if (!Login.IsInitialized) return false;
        }
        if (HasSay) {
          if (!Say.IsInitialized) return false;
        }
        if (HasMapRequest) {
          if (!MapRequest.IsInitialized) return false;
        }
        if (HasMapIgnore) {
          if (!MapIgnore.IsInitialized) return false;
        }
        if (HasMap) {
          if (!Map.IsInitialized) return false;
        }
        if (HasMapUpdate) {
          if (!MapUpdate.IsInitialized) return false;
        }
        if (HasMapCharacterUpdate) {
          if (!MapCharacterUpdate.IsInitialized) return false;
        }
        if (HasQueryServerResponse) {
          if (!QueryServerResponse.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messageFieldNames;
      if (hasMsgtype) {
        output.WriteInt32(1, field_names[8], Msgtype);
      }
      if (hasFrom) {
        output.WriteInt32(2, field_names[1], From);
      }
      if (hasDest) {
        output.WriteInt32(3, field_names[0], Dest);
      }
      if (hasResponse) {
        output.WriteMessage(4, field_names[14], Response);
      }
      if (hasPing) {
        output.WriteMessage(5, field_names[10], Ping);
      }
      if (hasPong) {
        output.WriteMessage(6, field_names[11], Pong);
      }
      if (hasNewUser) {
        output.WriteMessage(7, field_names[9], NewUser);
      }
      if (hasLogin) {
        output.WriteMessage(8, field_names[2], Login);
      }
      if (hasSay) {
        output.WriteMessage(9, field_names[15], Say);
      }
      if (hasMapRequest) {
        output.WriteMessage(10, field_names[6], MapRequest);
      }
      if (hasMapIgnore) {
        output.WriteMessage(11, field_names[5], MapIgnore);
      }
      if (hasMap) {
        output.WriteMessage(12, field_names[3], Map);
      }
      if (hasMapUpdate) {
        output.WriteMessage(13, field_names[7], MapUpdate);
      }
      if (hasMapCharacterUpdate) {
        output.WriteMessage(14, field_names[4], MapCharacterUpdate);
      }
      if (hasQueryServer) {
        output.WriteMessage(15, field_names[12], QueryServer);
      }
      if (hasQueryServerResponse) {
        output.WriteMessage(16, field_names[13], QueryServerResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMsgtype) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Msgtype);
        }
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, From);
        }
        if (hasDest) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Dest);
        }
        if (hasResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Response);
        }
        if (hasPing) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Ping);
        }
        if (hasPong) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Pong);
        }
        if (hasNewUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, NewUser);
        }
        if (hasLogin) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Login);
        }
        if (hasSay) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, Say);
        }
        if (hasMapRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, MapRequest);
        }
        if (hasMapIgnore) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, MapIgnore);
        }
        if (hasMap) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, Map);
        }
        if (hasMapUpdate) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, MapUpdate);
        }
        if (hasMapCharacterUpdate) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, MapCharacterUpdate);
        }
        if (hasQueryServer) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, QueryServer);
        }
        if (hasQueryServerResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, QueryServerResponse);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::CommsMessages.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::CommsMessages.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsgtype) {
          Msgtype = other.Msgtype;
        }
        if (other.HasFrom) {
          From = other.From;
        }
        if (other.HasDest) {
          Dest = other.Dest;
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasPing) {
          MergePing(other.Ping);
        }
        if (other.HasPong) {
          MergePong(other.Pong);
        }
        if (other.HasNewUser) {
          MergeNewUser(other.NewUser);
        }
        if (other.HasLogin) {
          MergeLogin(other.Login);
        }
        if (other.HasSay) {
          MergeSay(other.Say);
        }
        if (other.HasMapRequest) {
          MergeMapRequest(other.MapRequest);
        }
        if (other.HasMapIgnore) {
          MergeMapIgnore(other.MapIgnore);
        }
        if (other.HasMap) {
          MergeMap(other.Map);
        }
        if (other.HasMapUpdate) {
          MergeMapUpdate(other.MapUpdate);
        }
        if (other.HasMapCharacterUpdate) {
          MergeMapCharacterUpdate(other.MapCharacterUpdate);
        }
        if (other.HasQueryServer) {
          MergeQueryServer(other.QueryServer);
        }
        if (other.HasQueryServerResponse) {
          MergeQueryServerResponse(other.QueryServerResponse);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMsgtype = input.ReadInt32(ref result.msgtype_);
              break;
            }
            case 16: {
              result.hasFrom = input.ReadInt32(ref result.from_);
              break;
            }
            case 24: {
              result.hasDest = input.ReadInt32(ref result.dest_);
              break;
            }
            case 34: {
              global::CommsMessages.Response.Builder subBuilder = global::CommsMessages.Response.CreateBuilder();
              if (result.hasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::CommsMessages.Ping.Builder subBuilder = global::CommsMessages.Ping.CreateBuilder();
              if (result.hasPing) {
                subBuilder.MergeFrom(Ping);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Ping = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::CommsMessages.Pong.Builder subBuilder = global::CommsMessages.Pong.CreateBuilder();
              if (result.hasPong) {
                subBuilder.MergeFrom(Pong);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pong = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::CommsMessages.NewUser.Builder subBuilder = global::CommsMessages.NewUser.CreateBuilder();
              if (result.hasNewUser) {
                subBuilder.MergeFrom(NewUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewUser = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::CommsMessages.Login.Builder subBuilder = global::CommsMessages.Login.CreateBuilder();
              if (result.hasLogin) {
                subBuilder.MergeFrom(Login);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Login = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::CommsMessages.Say.Builder subBuilder = global::CommsMessages.Say.CreateBuilder();
              if (result.hasSay) {
                subBuilder.MergeFrom(Say);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Say = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::CommsMessages.MapRequest.Builder subBuilder = global::CommsMessages.MapRequest.CreateBuilder();
              if (result.hasMapRequest) {
                subBuilder.MergeFrom(MapRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MapRequest = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::CommsMessages.MapIgnore.Builder subBuilder = global::CommsMessages.MapIgnore.CreateBuilder();
              if (result.hasMapIgnore) {
                subBuilder.MergeFrom(MapIgnore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MapIgnore = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::CommsMessages.Map.Builder subBuilder = global::CommsMessages.Map.CreateBuilder();
              if (result.hasMap) {
                subBuilder.MergeFrom(Map);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Map = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::CommsMessages.MapUpdate.Builder subBuilder = global::CommsMessages.MapUpdate.CreateBuilder();
              if (result.hasMapUpdate) {
                subBuilder.MergeFrom(MapUpdate);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MapUpdate = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::CommsMessages.MapCharacterUpdate.Builder subBuilder = global::CommsMessages.MapCharacterUpdate.CreateBuilder();
              if (result.hasMapCharacterUpdate) {
                subBuilder.MergeFrom(MapCharacterUpdate);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MapCharacterUpdate = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::CommsMessages.QueryServer.Builder subBuilder = global::CommsMessages.QueryServer.CreateBuilder();
              if (result.hasQueryServer) {
                subBuilder.MergeFrom(QueryServer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QueryServer = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::CommsMessages.QueryServerResponse.Builder subBuilder = global::CommsMessages.QueryServerResponse.CreateBuilder();
              if (result.hasQueryServerResponse) {
                subBuilder.MergeFrom(QueryServerResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QueryServerResponse = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsgtype {
        get { return result.hasMsgtype; }
      }
      public int Msgtype {
        get { return result.Msgtype; }
        set { SetMsgtype(value); }
      }
      public Builder SetMsgtype(int value) {
        PrepareBuilder();
        result.hasMsgtype = true;
        result.msgtype_ = value;
        return this;
      }
      public Builder ClearMsgtype() {
        PrepareBuilder();
        result.hasMsgtype = false;
        result.msgtype_ = 0;
        return this;
      }
      
      public bool HasFrom {
        get { return result.hasFrom; }
      }
      public int From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(int value) {
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = 0;
        return this;
      }
      
      public bool HasDest {
        get { return result.hasDest; }
      }
      public int Dest {
        get { return result.Dest; }
        set { SetDest(value); }
      }
      public Builder SetDest(int value) {
        PrepareBuilder();
        result.hasDest = true;
        result.dest_ = value;
        return this;
      }
      public Builder ClearDest() {
        PrepareBuilder();
        result.hasDest = false;
        result.dest_ = 0;
        return this;
      }
      
      public bool HasResponse {
       get { return result.hasResponse; }
      }
      public global::CommsMessages.Response Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::CommsMessages.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::CommsMessages.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::CommsMessages.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResponse &&
            result.response_ != global::CommsMessages.Response.DefaultInstance) {
            result.response_ = global::CommsMessages.Response.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = null;
        return this;
      }
      
      public bool HasPing {
       get { return result.hasPing; }
      }
      public global::CommsMessages.Ping Ping {
        get { return result.Ping; }
        set { SetPing(value); }
      }
      public Builder SetPing(global::CommsMessages.Ping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPing = true;
        result.ping_ = value;
        return this;
      }
      public Builder SetPing(global::CommsMessages.Ping.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPing = true;
        result.ping_ = builderForValue.Build();
        return this;
      }
      public Builder MergePing(global::CommsMessages.Ping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPing &&
            result.ping_ != global::CommsMessages.Ping.DefaultInstance) {
            result.ping_ = global::CommsMessages.Ping.CreateBuilder(result.ping_).MergeFrom(value).BuildPartial();
        } else {
          result.ping_ = value;
        }
        result.hasPing = true;
        return this;
      }
      public Builder ClearPing() {
        PrepareBuilder();
        result.hasPing = false;
        result.ping_ = null;
        return this;
      }
      
      public bool HasPong {
       get { return result.hasPong; }
      }
      public global::CommsMessages.Pong Pong {
        get { return result.Pong; }
        set { SetPong(value); }
      }
      public Builder SetPong(global::CommsMessages.Pong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPong = true;
        result.pong_ = value;
        return this;
      }
      public Builder SetPong(global::CommsMessages.Pong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPong = true;
        result.pong_ = builderForValue.Build();
        return this;
      }
      public Builder MergePong(global::CommsMessages.Pong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPong &&
            result.pong_ != global::CommsMessages.Pong.DefaultInstance) {
            result.pong_ = global::CommsMessages.Pong.CreateBuilder(result.pong_).MergeFrom(value).BuildPartial();
        } else {
          result.pong_ = value;
        }
        result.hasPong = true;
        return this;
      }
      public Builder ClearPong() {
        PrepareBuilder();
        result.hasPong = false;
        result.pong_ = null;
        return this;
      }
      
      public bool HasNewUser {
       get { return result.hasNewUser; }
      }
      public global::CommsMessages.NewUser NewUser {
        get { return result.NewUser; }
        set { SetNewUser(value); }
      }
      public Builder SetNewUser(global::CommsMessages.NewUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewUser = true;
        result.newUser_ = value;
        return this;
      }
      public Builder SetNewUser(global::CommsMessages.NewUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewUser = true;
        result.newUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewUser(global::CommsMessages.NewUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewUser &&
            result.newUser_ != global::CommsMessages.NewUser.DefaultInstance) {
            result.newUser_ = global::CommsMessages.NewUser.CreateBuilder(result.newUser_).MergeFrom(value).BuildPartial();
        } else {
          result.newUser_ = value;
        }
        result.hasNewUser = true;
        return this;
      }
      public Builder ClearNewUser() {
        PrepareBuilder();
        result.hasNewUser = false;
        result.newUser_ = null;
        return this;
      }
      
      public bool HasLogin {
       get { return result.hasLogin; }
      }
      public global::CommsMessages.Login Login {
        get { return result.Login; }
        set { SetLogin(value); }
      }
      public Builder SetLogin(global::CommsMessages.Login value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = value;
        return this;
      }
      public Builder SetLogin(global::CommsMessages.Login.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLogin(global::CommsMessages.Login value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLogin &&
            result.login_ != global::CommsMessages.Login.DefaultInstance) {
            result.login_ = global::CommsMessages.Login.CreateBuilder(result.login_).MergeFrom(value).BuildPartial();
        } else {
          result.login_ = value;
        }
        result.hasLogin = true;
        return this;
      }
      public Builder ClearLogin() {
        PrepareBuilder();
        result.hasLogin = false;
        result.login_ = null;
        return this;
      }
      
      public bool HasSay {
       get { return result.hasSay; }
      }
      public global::CommsMessages.Say Say {
        get { return result.Say; }
        set { SetSay(value); }
      }
      public Builder SetSay(global::CommsMessages.Say value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSay = true;
        result.say_ = value;
        return this;
      }
      public Builder SetSay(global::CommsMessages.Say.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSay = true;
        result.say_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSay(global::CommsMessages.Say value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSay &&
            result.say_ != global::CommsMessages.Say.DefaultInstance) {
            result.say_ = global::CommsMessages.Say.CreateBuilder(result.say_).MergeFrom(value).BuildPartial();
        } else {
          result.say_ = value;
        }
        result.hasSay = true;
        return this;
      }
      public Builder ClearSay() {
        PrepareBuilder();
        result.hasSay = false;
        result.say_ = null;
        return this;
      }
      
      public bool HasMapRequest {
       get { return result.hasMapRequest; }
      }
      public global::CommsMessages.MapRequest MapRequest {
        get { return result.MapRequest; }
        set { SetMapRequest(value); }
      }
      public Builder SetMapRequest(global::CommsMessages.MapRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapRequest = true;
        result.mapRequest_ = value;
        return this;
      }
      public Builder SetMapRequest(global::CommsMessages.MapRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMapRequest = true;
        result.mapRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMapRequest(global::CommsMessages.MapRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMapRequest &&
            result.mapRequest_ != global::CommsMessages.MapRequest.DefaultInstance) {
            result.mapRequest_ = global::CommsMessages.MapRequest.CreateBuilder(result.mapRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.mapRequest_ = value;
        }
        result.hasMapRequest = true;
        return this;
      }
      public Builder ClearMapRequest() {
        PrepareBuilder();
        result.hasMapRequest = false;
        result.mapRequest_ = null;
        return this;
      }
      
      public bool HasMapIgnore {
       get { return result.hasMapIgnore; }
      }
      public global::CommsMessages.MapIgnore MapIgnore {
        get { return result.MapIgnore; }
        set { SetMapIgnore(value); }
      }
      public Builder SetMapIgnore(global::CommsMessages.MapIgnore value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapIgnore = true;
        result.mapIgnore_ = value;
        return this;
      }
      public Builder SetMapIgnore(global::CommsMessages.MapIgnore.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMapIgnore = true;
        result.mapIgnore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMapIgnore(global::CommsMessages.MapIgnore value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMapIgnore &&
            result.mapIgnore_ != global::CommsMessages.MapIgnore.DefaultInstance) {
            result.mapIgnore_ = global::CommsMessages.MapIgnore.CreateBuilder(result.mapIgnore_).MergeFrom(value).BuildPartial();
        } else {
          result.mapIgnore_ = value;
        }
        result.hasMapIgnore = true;
        return this;
      }
      public Builder ClearMapIgnore() {
        PrepareBuilder();
        result.hasMapIgnore = false;
        result.mapIgnore_ = null;
        return this;
      }
      
      public bool HasMap {
       get { return result.hasMap; }
      }
      public global::CommsMessages.Map Map {
        get { return result.Map; }
        set { SetMap(value); }
      }
      public Builder SetMap(global::CommsMessages.Map value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMap = true;
        result.map_ = value;
        return this;
      }
      public Builder SetMap(global::CommsMessages.Map.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMap = true;
        result.map_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMap(global::CommsMessages.Map value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMap &&
            result.map_ != global::CommsMessages.Map.DefaultInstance) {
            result.map_ = global::CommsMessages.Map.CreateBuilder(result.map_).MergeFrom(value).BuildPartial();
        } else {
          result.map_ = value;
        }
        result.hasMap = true;
        return this;
      }
      public Builder ClearMap() {
        PrepareBuilder();
        result.hasMap = false;
        result.map_ = null;
        return this;
      }
      
      public bool HasMapUpdate {
       get { return result.hasMapUpdate; }
      }
      public global::CommsMessages.MapUpdate MapUpdate {
        get { return result.MapUpdate; }
        set { SetMapUpdate(value); }
      }
      public Builder SetMapUpdate(global::CommsMessages.MapUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapUpdate = true;
        result.mapUpdate_ = value;
        return this;
      }
      public Builder SetMapUpdate(global::CommsMessages.MapUpdate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMapUpdate = true;
        result.mapUpdate_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMapUpdate(global::CommsMessages.MapUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMapUpdate &&
            result.mapUpdate_ != global::CommsMessages.MapUpdate.DefaultInstance) {
            result.mapUpdate_ = global::CommsMessages.MapUpdate.CreateBuilder(result.mapUpdate_).MergeFrom(value).BuildPartial();
        } else {
          result.mapUpdate_ = value;
        }
        result.hasMapUpdate = true;
        return this;
      }
      public Builder ClearMapUpdate() {
        PrepareBuilder();
        result.hasMapUpdate = false;
        result.mapUpdate_ = null;
        return this;
      }
      
      public bool HasMapCharacterUpdate {
       get { return result.hasMapCharacterUpdate; }
      }
      public global::CommsMessages.MapCharacterUpdate MapCharacterUpdate {
        get { return result.MapCharacterUpdate; }
        set { SetMapCharacterUpdate(value); }
      }
      public Builder SetMapCharacterUpdate(global::CommsMessages.MapCharacterUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapCharacterUpdate = true;
        result.mapCharacterUpdate_ = value;
        return this;
      }
      public Builder SetMapCharacterUpdate(global::CommsMessages.MapCharacterUpdate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMapCharacterUpdate = true;
        result.mapCharacterUpdate_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMapCharacterUpdate(global::CommsMessages.MapCharacterUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMapCharacterUpdate &&
            result.mapCharacterUpdate_ != global::CommsMessages.MapCharacterUpdate.DefaultInstance) {
            result.mapCharacterUpdate_ = global::CommsMessages.MapCharacterUpdate.CreateBuilder(result.mapCharacterUpdate_).MergeFrom(value).BuildPartial();
        } else {
          result.mapCharacterUpdate_ = value;
        }
        result.hasMapCharacterUpdate = true;
        return this;
      }
      public Builder ClearMapCharacterUpdate() {
        PrepareBuilder();
        result.hasMapCharacterUpdate = false;
        result.mapCharacterUpdate_ = null;
        return this;
      }
      
      public bool HasQueryServer {
       get { return result.hasQueryServer; }
      }
      public global::CommsMessages.QueryServer QueryServer {
        get { return result.QueryServer; }
        set { SetQueryServer(value); }
      }
      public Builder SetQueryServer(global::CommsMessages.QueryServer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQueryServer = true;
        result.queryServer_ = value;
        return this;
      }
      public Builder SetQueryServer(global::CommsMessages.QueryServer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQueryServer = true;
        result.queryServer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQueryServer(global::CommsMessages.QueryServer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQueryServer &&
            result.queryServer_ != global::CommsMessages.QueryServer.DefaultInstance) {
            result.queryServer_ = global::CommsMessages.QueryServer.CreateBuilder(result.queryServer_).MergeFrom(value).BuildPartial();
        } else {
          result.queryServer_ = value;
        }
        result.hasQueryServer = true;
        return this;
      }
      public Builder ClearQueryServer() {
        PrepareBuilder();
        result.hasQueryServer = false;
        result.queryServer_ = null;
        return this;
      }
      
      public bool HasQueryServerResponse {
       get { return result.hasQueryServerResponse; }
      }
      public global::CommsMessages.QueryServerResponse QueryServerResponse {
        get { return result.QueryServerResponse; }
        set { SetQueryServerResponse(value); }
      }
      public Builder SetQueryServerResponse(global::CommsMessages.QueryServerResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQueryServerResponse = true;
        result.queryServerResponse_ = value;
        return this;
      }
      public Builder SetQueryServerResponse(global::CommsMessages.QueryServerResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQueryServerResponse = true;
        result.queryServerResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQueryServerResponse(global::CommsMessages.QueryServerResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQueryServerResponse &&
            result.queryServerResponse_ != global::CommsMessages.QueryServerResponse.DefaultInstance) {
            result.queryServerResponse_ = global::CommsMessages.QueryServerResponse.CreateBuilder(result.queryServerResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.queryServerResponse_ = value;
        }
        result.hasQueryServerResponse = true;
        return this;
      }
      public Builder ClearQueryServerResponse() {
        PrepareBuilder();
        result.hasQueryServerResponse = false;
        result.queryServerResponse_ = null;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Ping : pb::GeneratedMessage<Ping, Ping.Builder> {
    private Ping() { }
    private static readonly Ping defaultInstance = new Ping().MakeReadOnly();
    private static readonly string[] _pingFieldNames = new string[] { "count" };
    private static readonly uint[] _pingFieldTags = new uint[] { 8 };
    public static Ping DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Ping DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Ping ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Ping__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Ping, Ping.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Ping__FieldAccessorTable; }
    }
    
    public const int CountFieldNumber = 1;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pingFieldNames;
      if (hasCount) {
        output.WriteInt32(1, field_names[0], Count);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Ping ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ping ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ping ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ping ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Ping ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Ping ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ping ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Ping MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Ping prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Ping, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Ping cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Ping result;
      
      private Ping PrepareBuilder() {
        if (resultIsReadOnly) {
          Ping original = result;
          result = new Ping();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Ping MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Ping.Descriptor; }
      }
      
      public override Ping DefaultInstanceForType {
        get { return global::CommsMessages.Ping.DefaultInstance; }
      }
      
      public override Ping BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Ping) {
          return MergeFrom((Ping) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Ping other) {
        if (other == global::CommsMessages.Ping.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCount) {
          Count = other.Count;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
    }
    static Ping() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Pong : pb::GeneratedMessage<Pong, Pong.Builder> {
    private Pong() { }
    private static readonly Pong defaultInstance = new Pong().MakeReadOnly();
    private static readonly string[] _pongFieldNames = new string[] { "count" };
    private static readonly uint[] _pongFieldTags = new uint[] { 8 };
    public static Pong DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Pong DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Pong ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Pong__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Pong, Pong.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Pong__FieldAccessorTable; }
    }
    
    public const int CountFieldNumber = 1;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pongFieldNames;
      if (hasCount) {
        output.WriteInt32(1, field_names[0], Count);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Pong ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pong ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pong ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pong ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pong ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pong ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Pong ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Pong ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Pong ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pong ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Pong MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Pong prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Pong, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Pong cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Pong result;
      
      private Pong PrepareBuilder() {
        if (resultIsReadOnly) {
          Pong original = result;
          result = new Pong();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Pong MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Pong.Descriptor; }
      }
      
      public override Pong DefaultInstanceForType {
        get { return global::CommsMessages.Pong.DefaultInstance; }
      }
      
      public override Pong BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Pong) {
          return MergeFrom((Pong) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Pong other) {
        if (other == global::CommsMessages.Pong.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCount) {
          Count = other.Count;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pongFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pongFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
    }
    static Pong() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "code", "message" };
    private static readonly uint[] _responseFieldTags = new uint[] { 8, 18 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Response ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Response__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Response__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private int code_;
    public bool HasCode {
      get { return hasCode; }
    }
    public int Code {
      get { return code_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _responseFieldNames;
      if (hasCode) {
        output.WriteInt32(1, field_names[0], Code);
      }
      if (hasMessage) {
        output.WriteString(2, field_names[1], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Code);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Response result;
      
      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Response.Descriptor; }
      }
      
      public override Response DefaultInstanceForType {
        get { return global::CommsMessages.Response.DefaultInstance; }
      }
      
      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Response other) {
        if (other == global::CommsMessages.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadInt32(ref result.code_);
              break;
            }
            case 18: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public int Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(int value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewUser : pb::GeneratedMessage<NewUser, NewUser.Builder> {
    private NewUser() { }
    private static readonly NewUser defaultInstance = new NewUser().MakeReadOnly();
    private static readonly string[] _newUserFieldNames = new string[] { "name", "password", "username" };
    private static readonly uint[] _newUserFieldTags = new uint[] { 26, 18, 10 };
    public static NewUser DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewUser DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewUser ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_NewUser__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewUser, NewUser.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_NewUser__FieldAccessorTable; }
    }
    
    public const int UsernameFieldNumber = 1;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUsername) return false;
        if (!hasPassword) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newUserFieldNames;
      if (hasUsername) {
        output.WriteString(1, field_names[2], Username);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[1], Password);
      }
      if (hasName) {
        output.WriteString(3, field_names[0], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Username);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewUser ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewUser ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewUser ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewUser ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewUser ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewUser MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewUser prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewUser, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewUser cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewUser result;
      
      private NewUser PrepareBuilder() {
        if (resultIsReadOnly) {
          NewUser original = result;
          result = new NewUser();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewUser MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.NewUser.Descriptor; }
      }
      
      public override NewUser DefaultInstanceForType {
        get { return global::CommsMessages.NewUser.DefaultInstance; }
      }
      
      public override NewUser BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewUser) {
          return MergeFrom((NewUser) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewUser other) {
        if (other == global::CommsMessages.NewUser.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newUserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newUserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static NewUser() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Login : pb::GeneratedMessage<Login, Login.Builder> {
    private Login() { }
    private static readonly Login defaultInstance = new Login().MakeReadOnly();
    private static readonly string[] _loginFieldNames = new string[] { "ipaddress", "password", "port", "username" };
    private static readonly uint[] _loginFieldTags = new uint[] { 10, 34, 16, 26 };
    public static Login DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Login DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Login ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Login__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Login, Login.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Login__FieldAccessorTable; }
    }
    
    public const int IpaddressFieldNumber = 1;
    private bool hasIpaddress;
    private string ipaddress_ = "";
    public bool HasIpaddress {
      get { return hasIpaddress; }
    }
    public string Ipaddress {
      get { return ipaddress_; }
    }
    
    public const int PortFieldNumber = 2;
    private bool hasPort;
    private int port_;
    public bool HasPort {
      get { return hasPort; }
    }
    public int Port {
      get { return port_; }
    }
    
    public const int UsernameFieldNumber = 3;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int PasswordFieldNumber = 4;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIpaddress) return false;
        if (!hasPort) return false;
        if (!hasUsername) return false;
        if (!hasPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginFieldNames;
      if (hasIpaddress) {
        output.WriteString(1, field_names[0], Ipaddress);
      }
      if (hasPort) {
        output.WriteInt32(2, field_names[2], Port);
      }
      if (hasUsername) {
        output.WriteString(3, field_names[3], Username);
      }
      if (hasPassword) {
        output.WriteString(4, field_names[1], Password);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIpaddress) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Ipaddress);
        }
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Port);
        }
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Username);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Password);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Login ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Login MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Login prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Login, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Login cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Login result;
      
      private Login PrepareBuilder() {
        if (resultIsReadOnly) {
          Login original = result;
          result = new Login();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Login MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Login.Descriptor; }
      }
      
      public override Login DefaultInstanceForType {
        get { return global::CommsMessages.Login.DefaultInstance; }
      }
      
      public override Login BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Login) {
          return MergeFrom((Login) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Login other) {
        if (other == global::CommsMessages.Login.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIpaddress) {
          Ipaddress = other.Ipaddress;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIpaddress = input.ReadString(ref result.ipaddress_);
              break;
            }
            case 16: {
              result.hasPort = input.ReadInt32(ref result.port_);
              break;
            }
            case 26: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 34: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIpaddress {
        get { return result.hasIpaddress; }
      }
      public string Ipaddress {
        get { return result.Ipaddress; }
        set { SetIpaddress(value); }
      }
      public Builder SetIpaddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIpaddress = true;
        result.ipaddress_ = value;
        return this;
      }
      public Builder ClearIpaddress() {
        PrepareBuilder();
        result.hasIpaddress = false;
        result.ipaddress_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      public int Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      public Builder SetPort(int value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
    }
    static Login() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Say : pb::GeneratedMessage<Say, Say.Builder> {
    private Say() { }
    private static readonly Say defaultInstance = new Say().MakeReadOnly();
    private static readonly string[] _sayFieldNames = new string[] { "text" };
    private static readonly uint[] _sayFieldTags = new uint[] { 10 };
    public static Say DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Say DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Say ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Say__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Say, Say.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Say__FieldAccessorTable; }
    }
    
    public const int TextFieldNumber = 1;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sayFieldNames;
      if (hasText) {
        output.WriteString(1, field_names[0], Text);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Text);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Say ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Say ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Say ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Say ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Say ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Say ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Say ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Say ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Say ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Say ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Say MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Say prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Say, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Say cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Say result;
      
      private Say PrepareBuilder() {
        if (resultIsReadOnly) {
          Say original = result;
          result = new Say();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Say MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Say.Descriptor; }
      }
      
      public override Say DefaultInstanceForType {
        get { return global::CommsMessages.Say.DefaultInstance; }
      }
      
      public override Say BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Say) {
          return MergeFrom((Say) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Say other) {
        if (other == global::CommsMessages.Say.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasText) {
          Text = other.Text;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sayFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sayFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
    }
    static Say() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapRequest : pb::GeneratedMessage<MapRequest, MapRequest.Builder> {
    private MapRequest() { }
    private static readonly MapRequest defaultInstance = new MapRequest().MakeReadOnly();
    private static readonly string[] _mapRequestFieldNames = new string[] { "x", "y" };
    private static readonly uint[] _mapRequestFieldTags = new uint[] { 8, 16 };
    public static MapRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MapRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MapRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MapRequest, MapRequest.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapRequest__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapRequestFieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[1], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MapRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MapRequest result;
      
      private MapRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MapRequest original = result;
          result = new MapRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MapRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.MapRequest.Descriptor; }
      }
      
      public override MapRequest DefaultInstanceForType {
        get { return global::CommsMessages.MapRequest.DefaultInstance; }
      }
      
      public override MapRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapRequest) {
          return MergeFrom((MapRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MapRequest other) {
        if (other == global::CommsMessages.MapRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
    }
    static MapRequest() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapIgnore : pb::GeneratedMessage<MapIgnore, MapIgnore.Builder> {
    private MapIgnore() { }
    private static readonly MapIgnore defaultInstance = new MapIgnore().MakeReadOnly();
    private static readonly string[] _mapIgnoreFieldNames = new string[] { "x", "y" };
    private static readonly uint[] _mapIgnoreFieldTags = new uint[] { 8, 16 };
    public static MapIgnore DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MapIgnore DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MapIgnore ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapIgnore__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MapIgnore, MapIgnore.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapIgnore__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapIgnoreFieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[1], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MapIgnore ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapIgnore ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapIgnore ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapIgnore ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapIgnore ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapIgnore ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapIgnore ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapIgnore ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapIgnore ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapIgnore ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapIgnore MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapIgnore prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapIgnore, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapIgnore cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MapIgnore result;
      
      private MapIgnore PrepareBuilder() {
        if (resultIsReadOnly) {
          MapIgnore original = result;
          result = new MapIgnore();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MapIgnore MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.MapIgnore.Descriptor; }
      }
      
      public override MapIgnore DefaultInstanceForType {
        get { return global::CommsMessages.MapIgnore.DefaultInstance; }
      }
      
      public override MapIgnore BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapIgnore) {
          return MergeFrom((MapIgnore) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MapIgnore other) {
        if (other == global::CommsMessages.MapIgnore.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapIgnoreFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapIgnoreFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
    }
    static MapIgnore() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Map : pb::GeneratedMessage<Map, Map.Builder> {
    private Map() { }
    private static readonly Map defaultInstance = new Map().MakeReadOnly();
    private static readonly string[] _mapFieldNames = new string[] { "dataSize", "maxX", "maxY", "minX", "minY" };
    private static readonly uint[] _mapFieldTags = new uint[] { 40, 24, 32, 8, 16 };
    public static Map DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Map DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Map ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Map__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Map, Map.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Map__FieldAccessorTable; }
    }
    
    public const int MinXFieldNumber = 1;
    private bool hasMinX;
    private int minX_;
    public bool HasMinX {
      get { return hasMinX; }
    }
    public int MinX {
      get { return minX_; }
    }
    
    public const int MinYFieldNumber = 2;
    private bool hasMinY;
    private int minY_;
    public bool HasMinY {
      get { return hasMinY; }
    }
    public int MinY {
      get { return minY_; }
    }
    
    public const int MaxXFieldNumber = 3;
    private bool hasMaxX;
    private int maxX_;
    public bool HasMaxX {
      get { return hasMaxX; }
    }
    public int MaxX {
      get { return maxX_; }
    }
    
    public const int MaxYFieldNumber = 4;
    private bool hasMaxY;
    private int maxY_;
    public bool HasMaxY {
      get { return hasMaxY; }
    }
    public int MaxY {
      get { return maxY_; }
    }
    
    public const int DataSizeFieldNumber = 5;
    private bool hasDataSize;
    private int dataSize_;
    public bool HasDataSize {
      get { return hasDataSize; }
    }
    public int DataSize {
      get { return dataSize_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMinX) return false;
        if (!hasMinY) return false;
        if (!hasMaxX) return false;
        if (!hasMaxY) return false;
        if (!hasDataSize) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapFieldNames;
      if (hasMinX) {
        output.WriteInt32(1, field_names[3], MinX);
      }
      if (hasMinY) {
        output.WriteInt32(2, field_names[4], MinY);
      }
      if (hasMaxX) {
        output.WriteInt32(3, field_names[1], MaxX);
      }
      if (hasMaxY) {
        output.WriteInt32(4, field_names[2], MaxY);
      }
      if (hasDataSize) {
        output.WriteInt32(5, field_names[0], DataSize);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMinX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MinX);
        }
        if (hasMinY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MinY);
        }
        if (hasMaxX) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, MaxX);
        }
        if (hasMaxY) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, MaxY);
        }
        if (hasDataSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, DataSize);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Map ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Map MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Map prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Map, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Map cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Map result;
      
      private Map PrepareBuilder() {
        if (resultIsReadOnly) {
          Map original = result;
          result = new Map();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Map MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Map.Descriptor; }
      }
      
      public override Map DefaultInstanceForType {
        get { return global::CommsMessages.Map.DefaultInstance; }
      }
      
      public override Map BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Map) {
          return MergeFrom((Map) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Map other) {
        if (other == global::CommsMessages.Map.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMinX) {
          MinX = other.MinX;
        }
        if (other.HasMinY) {
          MinY = other.MinY;
        }
        if (other.HasMaxX) {
          MaxX = other.MaxX;
        }
        if (other.HasMaxY) {
          MaxY = other.MaxY;
        }
        if (other.HasDataSize) {
          DataSize = other.DataSize;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMinX = input.ReadInt32(ref result.minX_);
              break;
            }
            case 16: {
              result.hasMinY = input.ReadInt32(ref result.minY_);
              break;
            }
            case 24: {
              result.hasMaxX = input.ReadInt32(ref result.maxX_);
              break;
            }
            case 32: {
              result.hasMaxY = input.ReadInt32(ref result.maxY_);
              break;
            }
            case 40: {
              result.hasDataSize = input.ReadInt32(ref result.dataSize_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMinX {
        get { return result.hasMinX; }
      }
      public int MinX {
        get { return result.MinX; }
        set { SetMinX(value); }
      }
      public Builder SetMinX(int value) {
        PrepareBuilder();
        result.hasMinX = true;
        result.minX_ = value;
        return this;
      }
      public Builder ClearMinX() {
        PrepareBuilder();
        result.hasMinX = false;
        result.minX_ = 0;
        return this;
      }
      
      public bool HasMinY {
        get { return result.hasMinY; }
      }
      public int MinY {
        get { return result.MinY; }
        set { SetMinY(value); }
      }
      public Builder SetMinY(int value) {
        PrepareBuilder();
        result.hasMinY = true;
        result.minY_ = value;
        return this;
      }
      public Builder ClearMinY() {
        PrepareBuilder();
        result.hasMinY = false;
        result.minY_ = 0;
        return this;
      }
      
      public bool HasMaxX {
        get { return result.hasMaxX; }
      }
      public int MaxX {
        get { return result.MaxX; }
        set { SetMaxX(value); }
      }
      public Builder SetMaxX(int value) {
        PrepareBuilder();
        result.hasMaxX = true;
        result.maxX_ = value;
        return this;
      }
      public Builder ClearMaxX() {
        PrepareBuilder();
        result.hasMaxX = false;
        result.maxX_ = 0;
        return this;
      }
      
      public bool HasMaxY {
        get { return result.hasMaxY; }
      }
      public int MaxY {
        get { return result.MaxY; }
        set { SetMaxY(value); }
      }
      public Builder SetMaxY(int value) {
        PrepareBuilder();
        result.hasMaxY = true;
        result.maxY_ = value;
        return this;
      }
      public Builder ClearMaxY() {
        PrepareBuilder();
        result.hasMaxY = false;
        result.maxY_ = 0;
        return this;
      }
      
      public bool HasDataSize {
        get { return result.hasDataSize; }
      }
      public int DataSize {
        get { return result.DataSize; }
        set { SetDataSize(value); }
      }
      public Builder SetDataSize(int value) {
        PrepareBuilder();
        result.hasDataSize = true;
        result.dataSize_ = value;
        return this;
      }
      public Builder ClearDataSize() {
        PrepareBuilder();
        result.hasDataSize = false;
        result.dataSize_ = 0;
        return this;
      }
    }
    static Map() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapUpdate : pb::GeneratedMessage<MapUpdate, MapUpdate.Builder> {
    private MapUpdate() { }
    private static readonly MapUpdate defaultInstance = new MapUpdate().MakeReadOnly();
    private static readonly string[] _mapUpdateFieldNames = new string[] { "newBlock", "x", "y", "z" };
    private static readonly uint[] _mapUpdateFieldTags = new uint[] { 32, 8, 16, 24 };
    public static MapUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MapUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MapUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MapUpdate, MapUpdate.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapUpdate__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private int z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public int Z {
      get { return z_; }
    }
    
    public const int NewBlockFieldNumber = 4;
    private bool hasNewBlock;
    private int newBlock_;
    public bool HasNewBlock {
      get { return hasNewBlock; }
    }
    public int NewBlock {
      get { return newBlock_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        if (!hasNewBlock) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapUpdateFieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[1], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteInt32(3, field_names[3], Z);
      }
      if (hasNewBlock) {
        output.WriteInt32(4, field_names[0], NewBlock);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Z);
        }
        if (hasNewBlock) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, NewBlock);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MapUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MapUpdate result;
      
      private MapUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          MapUpdate original = result;
          result = new MapUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MapUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.MapUpdate.Descriptor; }
      }
      
      public override MapUpdate DefaultInstanceForType {
        get { return global::CommsMessages.MapUpdate.DefaultInstance; }
      }
      
      public override MapUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapUpdate) {
          return MergeFrom((MapUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MapUpdate other) {
        if (other == global::CommsMessages.MapUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        if (other.HasNewBlock) {
          NewBlock = other.NewBlock;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadInt32(ref result.z_);
              break;
            }
            case 32: {
              result.hasNewBlock = input.ReadInt32(ref result.newBlock_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public int Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(int value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
      
      public bool HasNewBlock {
        get { return result.hasNewBlock; }
      }
      public int NewBlock {
        get { return result.NewBlock; }
        set { SetNewBlock(value); }
      }
      public Builder SetNewBlock(int value) {
        PrepareBuilder();
        result.hasNewBlock = true;
        result.newBlock_ = value;
        return this;
      }
      public Builder ClearNewBlock() {
        PrepareBuilder();
        result.hasNewBlock = false;
        result.newBlock_ = 0;
        return this;
      }
    }
    static MapUpdate() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapCharacterUpdate : pb::GeneratedMessage<MapCharacterUpdate, MapCharacterUpdate.Builder> {
    private MapCharacterUpdate() { }
    private static readonly MapCharacterUpdate defaultInstance = new MapCharacterUpdate().MakeReadOnly();
    private static readonly string[] _mapCharacterUpdateFieldNames = new string[] { "id", "x", "y", "z" };
    private static readonly uint[] _mapCharacterUpdateFieldTags = new uint[] { 8, 16, 24, 32 };
    public static MapCharacterUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MapCharacterUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MapCharacterUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapCharacterUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MapCharacterUpdate, MapCharacterUpdate.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapCharacterUpdate__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int XFieldNumber = 2;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 3;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 4;
    private bool hasZ;
    private int z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public int Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapCharacterUpdateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasX) {
        output.WriteInt32(2, field_names[1], X);
      }
      if (hasY) {
        output.WriteInt32(3, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteInt32(4, field_names[3], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Z);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MapCharacterUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapCharacterUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapCharacterUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapCharacterUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapCharacterUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapCharacterUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapCharacterUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapCharacterUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapCharacterUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapCharacterUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapCharacterUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapCharacterUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapCharacterUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapCharacterUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MapCharacterUpdate result;
      
      private MapCharacterUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          MapCharacterUpdate original = result;
          result = new MapCharacterUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MapCharacterUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.MapCharacterUpdate.Descriptor; }
      }
      
      public override MapCharacterUpdate DefaultInstanceForType {
        get { return global::CommsMessages.MapCharacterUpdate.DefaultInstance; }
      }
      
      public override MapCharacterUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapCharacterUpdate) {
          return MergeFrom((MapCharacterUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MapCharacterUpdate other) {
        if (other == global::CommsMessages.MapCharacterUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapCharacterUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapCharacterUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 24: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
            case 32: {
              result.hasZ = input.ReadInt32(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public int Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(int value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
    }
    static MapCharacterUpdate() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryServer : pb::GeneratedMessage<QueryServer, QueryServer.Builder> {
    private QueryServer() { }
    private static readonly QueryServer defaultInstance = new QueryServer().MakeReadOnly();
    private static readonly string[] _queryServerFieldNames = new string[] {  };
    private static readonly uint[] _queryServerFieldTags = new uint[] {  };
    public static QueryServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_QueryServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryServer, QueryServer.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_QueryServer__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryServerFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryServer result;
      
      private QueryServer PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryServer original = result;
          result = new QueryServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.QueryServer.Descriptor; }
      }
      
      public override QueryServer DefaultInstanceForType {
        get { return global::CommsMessages.QueryServer.DefaultInstance; }
      }
      
      public override QueryServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryServer) {
          return MergeFrom((QueryServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryServer other) {
        if (other == global::CommsMessages.QueryServer.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static QueryServer() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryServerResponse : pb::GeneratedMessage<QueryServerResponse, QueryServerResponse.Builder> {
    private QueryServerResponse() { }
    private static readonly QueryServerResponse defaultInstance = new QueryServerResponse().MakeReadOnly();
    private static readonly string[] _queryServerResponseFieldNames = new string[] { "maxMapChunkX", "maxMapChunkY", "minMapChunkX", "minMapChunkY" };
    private static readonly uint[] _queryServerResponseFieldTags = new uint[] { 24, 32, 8, 16 };
    public static QueryServerResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryServerResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryServerResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_QueryServerResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryServerResponse, QueryServerResponse.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_QueryServerResponse__FieldAccessorTable; }
    }
    
    public const int MinMapChunkXFieldNumber = 1;
    private bool hasMinMapChunkX;
    private int minMapChunkX_;
    public bool HasMinMapChunkX {
      get { return hasMinMapChunkX; }
    }
    public int MinMapChunkX {
      get { return minMapChunkX_; }
    }
    
    public const int MinMapChunkYFieldNumber = 2;
    private bool hasMinMapChunkY;
    private int minMapChunkY_;
    public bool HasMinMapChunkY {
      get { return hasMinMapChunkY; }
    }
    public int MinMapChunkY {
      get { return minMapChunkY_; }
    }
    
    public const int MaxMapChunkXFieldNumber = 3;
    private bool hasMaxMapChunkX;
    private int maxMapChunkX_;
    public bool HasMaxMapChunkX {
      get { return hasMaxMapChunkX; }
    }
    public int MaxMapChunkX {
      get { return maxMapChunkX_; }
    }
    
    public const int MaxMapChunkYFieldNumber = 4;
    private bool hasMaxMapChunkY;
    private int maxMapChunkY_;
    public bool HasMaxMapChunkY {
      get { return hasMaxMapChunkY; }
    }
    public int MaxMapChunkY {
      get { return maxMapChunkY_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMinMapChunkX) return false;
        if (!hasMinMapChunkY) return false;
        if (!hasMaxMapChunkX) return false;
        if (!hasMaxMapChunkY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryServerResponseFieldNames;
      if (hasMinMapChunkX) {
        output.WriteInt32(1, field_names[2], MinMapChunkX);
      }
      if (hasMinMapChunkY) {
        output.WriteInt32(2, field_names[3], MinMapChunkY);
      }
      if (hasMaxMapChunkX) {
        output.WriteInt32(3, field_names[0], MaxMapChunkX);
      }
      if (hasMaxMapChunkY) {
        output.WriteInt32(4, field_names[1], MaxMapChunkY);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMinMapChunkX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MinMapChunkX);
        }
        if (hasMinMapChunkY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MinMapChunkY);
        }
        if (hasMaxMapChunkX) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, MaxMapChunkX);
        }
        if (hasMaxMapChunkY) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, MaxMapChunkY);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryServerResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryServerResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryServerResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryServerResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryServerResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryServerResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryServerResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryServerResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryServerResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryServerResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryServerResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryServerResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryServerResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryServerResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryServerResponse result;
      
      private QueryServerResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryServerResponse original = result;
          result = new QueryServerResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryServerResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.QueryServerResponse.Descriptor; }
      }
      
      public override QueryServerResponse DefaultInstanceForType {
        get { return global::CommsMessages.QueryServerResponse.DefaultInstance; }
      }
      
      public override QueryServerResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryServerResponse) {
          return MergeFrom((QueryServerResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryServerResponse other) {
        if (other == global::CommsMessages.QueryServerResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMinMapChunkX) {
          MinMapChunkX = other.MinMapChunkX;
        }
        if (other.HasMinMapChunkY) {
          MinMapChunkY = other.MinMapChunkY;
        }
        if (other.HasMaxMapChunkX) {
          MaxMapChunkX = other.MaxMapChunkX;
        }
        if (other.HasMaxMapChunkY) {
          MaxMapChunkY = other.MaxMapChunkY;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryServerResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryServerResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMinMapChunkX = input.ReadInt32(ref result.minMapChunkX_);
              break;
            }
            case 16: {
              result.hasMinMapChunkY = input.ReadInt32(ref result.minMapChunkY_);
              break;
            }
            case 24: {
              result.hasMaxMapChunkX = input.ReadInt32(ref result.maxMapChunkX_);
              break;
            }
            case 32: {
              result.hasMaxMapChunkY = input.ReadInt32(ref result.maxMapChunkY_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMinMapChunkX {
        get { return result.hasMinMapChunkX; }
      }
      public int MinMapChunkX {
        get { return result.MinMapChunkX; }
        set { SetMinMapChunkX(value); }
      }
      public Builder SetMinMapChunkX(int value) {
        PrepareBuilder();
        result.hasMinMapChunkX = true;
        result.minMapChunkX_ = value;
        return this;
      }
      public Builder ClearMinMapChunkX() {
        PrepareBuilder();
        result.hasMinMapChunkX = false;
        result.minMapChunkX_ = 0;
        return this;
      }
      
      public bool HasMinMapChunkY {
        get { return result.hasMinMapChunkY; }
      }
      public int MinMapChunkY {
        get { return result.MinMapChunkY; }
        set { SetMinMapChunkY(value); }
      }
      public Builder SetMinMapChunkY(int value) {
        PrepareBuilder();
        result.hasMinMapChunkY = true;
        result.minMapChunkY_ = value;
        return this;
      }
      public Builder ClearMinMapChunkY() {
        PrepareBuilder();
        result.hasMinMapChunkY = false;
        result.minMapChunkY_ = 0;
        return this;
      }
      
      public bool HasMaxMapChunkX {
        get { return result.hasMaxMapChunkX; }
      }
      public int MaxMapChunkX {
        get { return result.MaxMapChunkX; }
        set { SetMaxMapChunkX(value); }
      }
      public Builder SetMaxMapChunkX(int value) {
        PrepareBuilder();
        result.hasMaxMapChunkX = true;
        result.maxMapChunkX_ = value;
        return this;
      }
      public Builder ClearMaxMapChunkX() {
        PrepareBuilder();
        result.hasMaxMapChunkX = false;
        result.maxMapChunkX_ = 0;
        return this;
      }
      
      public bool HasMaxMapChunkY {
        get { return result.hasMaxMapChunkY; }
      }
      public int MaxMapChunkY {
        get { return result.MaxMapChunkY; }
        set { SetMaxMapChunkY(value); }
      }
      public Builder SetMaxMapChunkY(int value) {
        PrepareBuilder();
        result.hasMaxMapChunkY = true;
        result.maxMapChunkY_ = value;
        return this;
      }
      public Builder ClearMaxMapChunkY() {
        PrepareBuilder();
        result.hasMaxMapChunkY = false;
        result.maxMapChunkY_ = 0;
        return this;
      }
    }
    static QueryServerResponse() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
